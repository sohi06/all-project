import datetime

class Animal:
    def __init__(self, animal_id, name, species, health_status, enclosure):
        self.__animal_id = animal_id
        self.__name = name
        self.__species = species
        self.__health_status = health_status
        self.__enclosure = enclosure

    def get_animal_id(self):
        return self.__animal_id

    def get_name(self):
        return self.__name

    def get_species(self):
        return self.__species

    def get_health_status(self):
        return self.__health_status

    def update_health_status(self, status):
        self.__health_status = status

    def display(self):
        return f"ID: {self.__animal_id}, Name: {self.__name}, Species: {self.__species}, Health: {self.__health_status}, Enclosure: {self.__enclosure}"


class Admin:
    def __init__(self):
        self.__animals = {}
        self.__dead_animals = []

    def add_animal(self, animal):
        if animal.get_animal_id() in self.__animals:
            raise ValueError("Animal ID already exists.")
        self.__animals[animal.get_animal_id()] = animal
        return f"Animal {animal.get_name()} added successfully."

    def view_animals(self):
        if not self.__animals:
            return "No animals in the zoo."
        return "\n".join([animal.display() for animal in self.__animals.values()])

    def update_health_status(self, animal_id, status):
        if animal_id not in self.__animals:
            raise KeyError("Animal ID not found.")
        animal = self.__animals[animal_id]
        animal.update_health_status(status)

        # If the animal is dead, move it to the dead animals list
        if status.lower() == "dead":
            date_of_death = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            self.__dead_animals.append((animal, date_of_death))
            del self.__animals[animal_id]
            return f"Animal {animal.get_name()} marked as dead on {date_of_death}."

        return f"Updated health status of {animal.get_name()} to {status}."

    def view_dead_animals(self):
        if not self.__dead_animals:
            return "No dead animals."
        return "\n".join([f"ID: {animal.get_animal_id()}, Name: {animal.get_name()}, Species: {animal.get_species()}, Date of Death: {death_date}" 
                          for animal, death_date in self.__dead_animals])


class ZooManagementSystem:
    def __init__(self):
        self.__users = {}
        self.__admin = Admin()

    def add_user(self, username, password, role):
        if username in self.__users:
            raise ValueError("Username already exists.")
        self.__users[username] = User(username, password, role)

    def login(self, username, password):
        if username not in self.__users:
            return None, "Username not found."
        user = self.__users[username]
        if not user.verify_password(password):
            return None, "Incorrect password."
        return user, f"Welcome {username}!"

    def get_admin(self):
        return self.__admin


def main():
    zoo_system = ZooManagementSystem()

    # Predefined admin account
    zoo_system.add_user("admin", "admin123", "admin")

    while True:
        print("\n***** Zoo Management System *****")
        print("1. Login")
        print("2. Exit")

        choice = input("Choose an option: ")

        if choice == "1":
            username = input("Username: ")
            password = input("Password: ")
            user, message = zoo_system.login(username, password)
            print(message)

            if user:
                if user.get_role() == "admin":
                    admin_panel(zoo_system.get_admin())

                elif user.get_role() == "zookeeper":
                    print("\nZookeeper Panel (Features coming soon).")

        elif choice == "2":
            print("Exiting system. Goodbye!")
            break

        else:
            print("Invalid choice. Please try again.")


def admin_panel(admin):
    while True:
        print("\nAdmin Panel")
        print("1. Add Animal")
        print("2. View Animals")
        print("3. Update Animal Health Status")
        print("4. View Dead Animals")
        print("5. Logout")
        admin_choice = input("Choose an option: ")

        if admin_choice == "1":
            animal_id = int(input("Animal ID: "))
            name = input("Name: ")
            species = input("Species: ")
            health_status = input("Health Status: ")
            enclosure = input("Enclosure: ")
            animal = Animal(animal_id, name, species, health_status, enclosure)
            print(admin.add_animal(animal))

        elif admin_choice == "2":
            print(admin.view_animals())

        elif admin_choice == "3":
            animal_id = int(input("Animal ID: "))
            health_status = input("New Health Status: ")
            print(admin.update_health_status(animal_id, health_status))

        elif admin_choice == "4":
            print(admin.view_dead_animals())

        elif admin_choice == "5":
            print("Logging out...")
            break

        else:
            print("Invalid choice.")


if __name__ == "__main__":
    main()